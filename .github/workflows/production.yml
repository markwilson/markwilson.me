name: Deploy to markwilson.me

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup node (v18)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install app dependencies
        run: yarn

  build:
    runs-on: ubuntu-latest

    needs: dependencies

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup node (v18)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install app dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: yarn

      - name: Build static site
        run: yarn build

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ./build/
          if-no-files-found: error
          retention-days: 3

  test:
    runs-on: ubuntu-latest

    needs: [dependencies, build]

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: build

      - run: ls -al

      - name: Setup node (v18)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install app dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: yarn

      - name: Run e2e tests
        uses: cypress-io/github-action@v4
        with:
          install: false
          start: yarn start:production-like-server

      - name: Upload Cypress results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-results
          path: |
            ./cypress/screenshots
            ./cypress/videos
          retention-days: 3

  deploy:
    runs-on: ubuntu-latest

    needs: [build, test]

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v1

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "./build/"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@main

  infrastructure:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Configure AWS credentials for Terraform S3 backend
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.7

      - name: Initialise Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
